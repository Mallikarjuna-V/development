package com.bnymellon.bds.bdc.replay;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

import com.ibm.mq.MQEnvironment;
import com.ibm.mq.MQException;
import com.ibm.mq.MQMessage;
import com.ibm.mq.MQPutMessageOptions;
import com.ibm.mq.MQQueue;
import com.ibm.mq.MQQueueManager;
import com.ibm.mq.constants.MQConstants;

/**
 * Servlet implementation class ReplayServlet
 */
@WebServlet("/ReplayServlet")
@MultipartConfig
public class ReplayServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	public static String qname;
	public static String cname;
	public static String msgtype;
	public static String port;
	public static String qmgr;
	public static String hostname;
	public static String uid;
	public static String pwd;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ReplayServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//Delegate the request to doPost method
		//doPost(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		qname = request.getParameter("qname");
		cname = request.getParameter("cname");
		msgtype = request.getParameter("msgtype");
		qmgr = request.getParameter("qmgr");
		port = request.getParameter("port");
		hostname = request.getParameter("hostname");
		uid = request.getParameter("uid");
		pwd = request.getParameter("pwd");
		Part filePart = request.getPart("filePath");
		InputStream fileContent = filePart.getInputStream();
		InputStreamReader iReader = new InputStreamReader(fileContent);
		int number = 0;
		if("FTSIN".equals(msgtype)){
			try {
				number = sendFTSIN(iReader);
			} catch (MQException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("Message sent count : "+number);
		
		request.getSession().setAttribute("count", number);
		response.sendRedirect("/Replay/index1.jsp");
		
	}

	private int sendFTSIN(InputStreamReader iReader) throws MQException, InterruptedException {
		MQQueueManager mgr = getQmgr();
		MQQueue queue = mgr.accessQueue(qname, MQConstants.MQOO_OUTPUT);
		BufferedReader br = new BufferedReader(iReader);
		String message = null;
		String line = null;
		int number = 0;
		try {
			while((line = br.readLine()) != null){
				message = line.trim();
				if(message.trim().length() ==0)
					continue;
				MQMessage msg = new MQMessage();
				System.out.println("Length of the ftsin message is:"+message.length());
				msg.writeString(message);
				number++;
				sendToMQWithRetry(msg,mgr,queue);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return number;
	}
	
	/**
	 * Attempt to write the message multiple times and also check for the queue full error
	 * @param message
	 * @param qmgr
	 * @param queue
	 * @throws InterruptedException 
	 * @throws MQException 
	 */
	private void sendToMQWithRetry(MQMessage message, MQQueueManager qmgr, MQQueue queue) throws InterruptedException, MQException {
		for(int i =0 ;i<1;i++){
			try{
				MQPutMessageOptions options = new MQPutMessageOptions();
				queue.put(message,options);
				qmgr.commit();
			}catch(MQException ex){
				if(ex.getReason() == 2053){
					System.out.println("Sleeping for two seconds,queue is full");
					Thread.sleep(2000);
				}else{
					throw ex;
				}
			}
		}
	}

	
	private static MQQueueManager getQmgr() throws MQException{
		MQEnvironment.hostname = hostname;
		MQEnvironment.channel = cname;
		MQEnvironment.port = Integer.parseInt(port);
		MQEnvironment.userID = uid;
		MQEnvironment.password = pwd;
		MQQueueManager qmanager  = new MQQueueManager(qmgr);
		return qmanager;
	}
}
